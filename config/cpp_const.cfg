include
    #include <experimental/filesystem>
    #include <fstream>
    #include <iostream>
    #include <vector>
    #include <string>
    #include <map>
    
    using namespace std;
    namespace fs = std::experimental::filesystem;
    
    map<string, string> values;
    
    
main_func_begin
    
    void parse(string path)
    {
        ifstream file(path.c_str());
    
main_func_end
        file.close();
    }
    
    int main()
    {
        bool first = true;
        for(auto& p: fs::directory_iterator("input"))
        {
            values.clear();
            parse(p.path().relative_path());
            if(first)
            {
                first = false;
                cout << "Instance";
                for(auto value : values)
                    cout << " | " << value.first;
                cout << endl << ":--";
                for(int i = 0; i < values.size(); ++i)
                    cout << " | :-:";
                cout << endl;
            }
            cout << (string) p.path().filename();
            for(auto value : values)
                cout << " | **" << value.second << "**";
            cout << endl;
        }
    }
    
default_type
    int
struct_begin
    {{ node.shift }}struct {{ node.type }}
    {{ node.shift }}{
    
struct_end
    {{ node.shift }}};
    
    
array_declaration
    {{ node.shift }}vector<{{ node.type }}> {{ node.name }};
    
var_declaration
    {{ node.shift }}{{ node.type }} {{ node.name }};
    
indentation
        
array_init
    {{ node.shift }}{{ node.name }}.resize({{ node.size }});
    
loop_begin
    {{ node.shift }}for(int {{ iterator }} = 0; {{ iterator }} < {{ node.size }}; ++{{ iterator }})
    {{ node.shift }}{
    
loop_end
    {{ node.shift }}}
    
fetch_var
    {{ node.shift }}file >> {{ node.name }};
    {% if node.depth == "1" %}{{ node.shift }}values["{{ node.name }}"] = to_string({{ node.name }});
    {% endif %}
fetch_array
    {{ node.shift }}    file >> {{ node.name }}[{{ iterator }}];
    
array_element
    {{ node.name }}[{{ iterator }}].
struct_element=
    .
